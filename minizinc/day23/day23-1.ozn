output ["\"output\": {","\"default\": ",showJSON(concat([show_rooms(step) | step in ExtendedSteps]++["moves:      ",show([display_move_type[fix(move_types[step])]++display_move_content[fix(moved[step])] | step in Steps]),"\n","move types: ",_toString_MoveType(move_types,false,false),"\n","moved:      ",_toString_Content(moved,false,false),"\n","checksum:   ",show(checksum),"\n"])),", \"raw\": ",showJSON(concat([show_rooms(step) | step in ExtendedSteps]++["moves:      ",show([display_move_type[fix(move_types[step])]++display_move_content[fix(moved[step])] | step in Steps]),"\n","move types: ",_toString_MoveType(move_types,false,false),"\n","moved:      ",_toString_Content(moved,false,false),"\n","checksum:   ",show(checksum),"\n"])),"}, \"sections\": [\"default\", \"raw\"]"];
function string : show_rooms(ExtendedSteps: s) = ((((((((((((((((((((((("#############\n"++"#")++concat([d(s,h) | h in Hallways]))++"#  ")++if s in Steps then display_move_type[fix(move_types[s])]++display_move_content[fix(moved[s])] else "Initial" endif)++"\n")++"###")++d(s,S11))++"#")++d(s,S21))++"#")++d(s,S31))++"#")++d(s,S41))++"###\n")++"###")++d(s,S12))++"#")++d(s,S22))++"#")++d(s,S32))++"#")++d(s,S42))++"###\n")++"  ##########  \n";
function string : d(ExtendedSteps: step,Room: room) = display_content[fix(rooms[step,room])];
function string : _toString_Content(array [$U] of opt Content: x,bool: b,bool: json) = let {array [int] of opt Content: xx = array1d(x)} in (("["++join(", ",[_toString_Content(xx[i],b,json) | i in index_set(xx)]))++"]");
function string : _toString_Content(opt Content: x,bool: b,bool: json) = if absent(x) then if json then "null" else "<>" endif else if deopt(x)<=card(Creature) then _toString_0_Content(x,b,json) else _toString_1_Content(x,b,json) endif endif;
function string : _toString_0_Content(opt Content: x,bool: b,bool: json) = if absent(x) then if json then "null" else "<>" endif else (if json then "{ \"c\" : \"C\", \"e\" : " else if b then showDznId("C") else "C" endif++"(" endif++_toString_Creature('C⁻¹'(x),b,json))++if json then "}" else ")" endif endif;
function string : _toString_Creature(opt int: x,bool: b,bool: json) = if occurs(x) then if b then showDznId(_enum_to_string_0_Creature[deopt(x)]) elseif json then ("{\"e\":"++show(_enum_to_string_0_Creature[deopt(x)]))++"}" else _enum_to_string_0_Creature[deopt(x)] endif else if json then "null" else "<>" endif endif;
function opt Creature : 'C⁻¹'(opt Content: x) = if occurs(x) then 'C⁻¹'(deopt(x)) else to_enum(Creature,<>) endif;
function Creature : 'C⁻¹'(Content: x) = to_enum(Creature,x-_constrMin_0_Content);
function string : _toString_1_Content(opt int: x,bool: b,bool: json) = if occurs(x) then if b then showDznId(_enum_to_string_1_Content[deopt(x)-card(Creature)]) elseif json then ("{\"e\":"++show(_enum_to_string_1_Content[deopt(x)-card(Creature)]))++"}" else _enum_to_string_1_Content[deopt(x)-card(Creature)] endif else if json then "null" else "<>" endif endif;
function string : _toString_MoveType(array [$U] of opt MoveType: x,bool: b,bool: json) = let {array [int] of opt MoveType: xx = array1d(x)} in (("["++join(", ",[_toString_MoveType(xx[i],b,json) | i in index_set(xx)]))++"]");
function string : _toString_MoveType(opt int: x,bool: b,bool: json) = if occurs(x) then if b then showDznId(_enum_to_string_0_MoveType[deopt(x)]) elseif json then ("{\"e\":"++show(_enum_to_string_0_MoveType[deopt(x)]))++"}" else _enum_to_string_0_MoveType[deopt(x)] endif else if json then "null" else "<>" endif endif;
set of int: Content = 1..9;
array [Content] of string: display_content = ["A","A","B","B","C","C","D","D","."];
array [ExtendedSteps,Room] of int: rooms;
set of int: Room = 1..19;
set of int: Hallways = 1..11;
set of int: MoveType = 1..5;
array [MoveType] of string: display_move_type = ["Home","Home","Out","Out","Done"];
array [Steps] of int: move_types;
array [Content] of string: display_move_content = [" A"," A"," B"," B"," C"," C"," D"," D",""];
array [Steps] of int: moved;
set of int: Steps = 1..16;
int: S11 = 12;
int: S21 = 13;
int: S31 = 14;
int: S41 = 15;
int: S12 = 16;
int: S22 = 17;
int: S32 = 18;
int: S42 = 19;
set of int: ExtendedSteps = 0..16;
int: checksum = 0;
array [1..8] of string: _enum_to_string_0_Creature = ["A1","A2","B1","B2","C1","C2","D1","D2"];
int: _constrMin_0_Content = 0;
set of int: Creature = 1..8;
array [1..1] of string: _enum_to_string_1_Content = ["Empty"];
array [1..5] of string: _enum_to_string_0_MoveType = ["HomeRight","HomeLeft","OutRight","OutLeft","Done"];
